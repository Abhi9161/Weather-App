{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","time","setTime","useEffect","fetchData","a","fetch","then","res","json","result","currentTime","Date","getHours","catch","error","console","log","search","evt","key","className","main","type","placeholder","onChange","e","target","value","onKeyPress","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Math","round","temp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNACMA,EACC,mCADDA,EAEE,2CAkHOC,MA/Gf,WACE,MAA0BC,mBAAS,SAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAwBJ,mBAAS,MAAjC,mBAAOK,EAAP,KAAaC,EAAb,KACAC,qBAAU,WACRL,EAAS,SACTM,MACC,IAEH,IAAMA,EAAS,uCAAG,sBAAAC,EAAA,sEACVC,MAAM,GAAD,OAAIZ,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IAC7Da,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLV,EAAWU,GACXZ,EAAS,IACT,IAAIa,EAAc,IAAIC,KAEtBV,EAAQS,EAAYE,eAErBC,OAAM,SAACC,GACNC,QAAQC,IAAIF,MAXA,2CAAH,qDAeTG,EAAM,uCAAG,WAAOC,GAAP,SAAAd,EAAA,sDACG,UAAZc,EAAIC,KACNhB,IAFW,2CAAH,sDAwCZ,OACE,qBACEiB,UACyB,oBAAhBtB,EAAQuB,KACXrB,GAAQ,GACN,YACAA,GAAQ,GACR,WACAA,GAAQ,GACR,YACAA,GAAQ,EACR,WACA,YACF,YAZR,SAcE,iCACE,qBAAKoB,UAAU,aAAf,SACE,uBACEE,KAAK,OACLF,UAAU,aACVG,YAAY,YACZC,SAAU,SAACC,GAAD,OAAO5B,EAAS4B,EAAEC,OAAOC,QACnCA,MAAO/B,EACPgC,WAAYX,MAGQ,oBAAhBnB,EAAQuB,KACd,gCACE,sBAAKD,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UACGtB,EAAQ+B,KADX,KACmB/B,EAAQgC,IAAIC,WAE/B,qBAAKX,UAAU,OAAf,SAlEQ,SAACY,GACnB,IAwBIC,EAVO,CACT,SACA,SACA,UACA,YACA,WACA,SACA,YAGaD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EA1BS,CACX,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAciBL,EAAEM,YACjBC,EAAOP,EAAEQ,cAGb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAmCDE,CAAY,IAAI9B,WAEzC,sBAAKS,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UAAuBsB,KAAKC,MAAM7C,EAAQuB,KAAKuB,MAA/C,WACA,qBAAKxB,UAAU,UAAf,SAA0BtB,EAAQA,QAAQ,GAAGuB,aAIjD,SClGKwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzC,MAAK,YAAkD,IAA/C0C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1BZ,M","file":"static/js/main.36877ea9.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nconst api = {\n  key: \"b0d6e016298936c5d9e79cc90049fc49\",\n  base: \"https://api.openweathermap.org/data/2.5/\",\n};\n\nfunction App() {\n  const [query, setQuery] = useState(\"delhi\");\n  const [weather, setWeather] = useState({});\n  const [time, setTime] = useState(null);\n  useEffect(() => {\n    setQuery(\"delhi\");\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    await fetch(`${api.base}weather?q=${query}&units=metric&appid=${api.key}`)\n      .then((res) => res.json())\n      .then((result) => {\n        setWeather(result);\n        setQuery(\"\");\n        let currentTime = new Date();\n        // console.log(currentTime);\n        setTime(currentTime.getHours());\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const search = async (evt) => {\n    if (evt.key === \"Enter\") {\n      fetchData();\n    }\n  };\n\n  const dateBuilder = (d) => {\n    let months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    let days = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n    // let time= d.getHour();\n\n    return `${day} ${date} ${month} ${year}`;\n  };\n\n  return (\n    <div\n      className={\n        typeof weather.main != \"undefined\"\n          ? time >= 19\n            ? \"app night\"\n            : time >= 16\n            ? \"app even\"\n            : time >= 12\n            ? \"app after\"\n            : time >= 5\n            ? \"app morn\"\n            : \"app night\"\n          : \"app night\"\n      }>\n      <main>\n        <div className='search-box'>\n          <input\n            type='text'\n            className='search-bar'\n            placeholder='Search...'\n            onChange={(e) => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n          />\n        </div>\n        {typeof weather.main != \"undefined\" ? (\n          <div>\n            <div className='location-box'>\n              <div className='location'>\n                {weather.name}, {weather.sys.country}\n              </div>\n              <div className='date'>{dateBuilder(new Date())}</div>\n            </div>\n            <div className='weather-box'>\n              <div className='temp'>{Math.round(weather.main.temp)}Â°c</div>\n              <div className='weather'>{weather.weather[0].main}</div>\n            </div>\n          </div>\n        ) : (\n          \"\"\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}